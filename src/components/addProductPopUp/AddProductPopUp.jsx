import React, { useCallback, useEffect, useRef, useState } from 'react';
import styles from './addProductPopUp.module.css';
import { useDispatch, useSelector } from 'react-redux';
import { addProduct, selectCategories, selectGolds } from '../../features/productsSlice/productsSlice';
import { useHomeContext } from '../home/HomeContext';


const AddProductPopUp = ({ addPopUp, setAddPopUp }) => {
    const { setProducts, products } = useHomeContext();
    const [gender, setGender] = useState(true);
    const [categories, setCatgories] = useState([]);
    const categoriesSelect = useSelector(selectCategories);
    const goldsSelect = useSelector(selectGolds)
    const [selectedCategory, setSelectedCategory] = useState({});
    const subCategoriesRef = useRef(null);
    const [currentSubCategory, setCurrentSubCategory] = useState("");
    const scrollBoxRef = useRef(null);
    const scrollTumbRef = useRef(null);
    const buttonsGroupBox = useRef(null);
    const [addedImg, setAddedImg] = useState("");
    const [imgs, setImgs] = useState({});
    const [tagsinputChange, setTagsInputChange] = useState(false);
    const [articleinputChange, setArticleInputChange] = useState(false);
    const [tags, setTags] = useState("");
    const [article, setArticle] = useState("");
    const [showGold, setShowGold] = useState(true);
    const [currentGoldProb, setCurrentGoldProb] = useState({});
    const [startWeight, setStartWeight] = useState("")
    const [endWeight, setEndWeight] = useState("");
    const [price, setPrice] = useState("");
    const dispath = useDispatch();



    useEffect(() => {
        setCatgories(() => categoriesSelect.filter((el) => el.gender === "womens" === gender))
    }, [gender, categoriesSelect])
    const timeOut = useCallback(() => {
        return setTimeout(() => {
            if (scrollTumbRef.current && scrollBoxRef) {
                scrollTumbRef.current.style.transform = `translateX(${(subCategoriesRef.current.getBoundingClientRect().x - buttonsGroupBox.current.getBoundingClientRect().x - 15)}px)`;
                scrollTumbRef.current.style.width = `${subCategoriesRef.current.offsetWidth + 30}px`;
            }
        }, 400)
    }, [])
    useEffect(() => {
        timeOut()
    }, [currentSubCategory, subCategoriesRef.current])
    useEffect(() => {
        setCurrentSubCategory("");
        if (buttonsGroupBox.current) buttonsGroupBox.current.scrollLeft = 0;
        timeOut()
    }, [selectedCategory])

    useEffect(() => {
        setCurrentSubCategory(null);
        if (scrollTumbRef.current && subCategoriesRef) {
            scrollTumbRef.current.style.transition = "0.1s";
            scrollTumbRef.current.style.transform = `translateX(18px)`;
            setTimeout(() => {
                scrollTumbRef.current.style.transition = "";
            }, 0)
        }
    }, [selectedCategory.id]);


    return (
        <div className={`${styles.addProductPopUpBox} ${addPopUp ? styles.active : ""}`}  >
            <div className={`${styles.addProductPopUp} ${addPopUp ? styles.activeBox : ""}`}>
                <p className={styles.head}>
                    добавить изделия
                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg" onClick={() => setAddPopUp(false)} >
                        <path d="M17 1L1 17" stroke="#4F4F4F" strokeOpacity="0.55" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                        <path d="M1 1L17 17" stroke="#4F4F4F" strokeOpacity="0.55" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>

                </p>
                <div className={styles.container}>
                    <div className={styles.selectCategory}>
                        <div className={styles.categoriesBox}>
                            <div className={styles.changeGender}>
                                <div className={`${styles.gender} ${gender ? styles.activeGender : ""}`}
                                    onClick={() => {
                                        if (!gender) setGender(true)
                                        setSelectedCategory({})
                                    }}>
                                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M3.19278 13.5375L6.06602 12.8196L6.23179 12.1564C5.16954 12.0125 4.13929 11.6902 3.18456 11.2032C3.07814 11.1394 3.01022 11.0272 3.00305 10.9034C2.99552 10.7796 3.04899 10.6598 3.14631 10.5827C3.15981 10.5737 4.50006 9.46762 4.50006 5.63532C4.50006 2.40326 5.2568 0.764386 6.75006 0.764386H6.97506C7.49312 0.208152 8.24434 -0.0698417 9.00005 0.0150247C10.4093 0.0150247 13.5 1.4306 13.5 5.63532C13.5 9.46762 14.8403 10.5737 14.85 10.5812C15.0159 10.7051 15.0498 10.9399 14.9257 11.1057C14.8966 11.1445 14.8602 11.1774 14.8185 11.2024C13.8646 11.694 12.833 12.0175 11.7691 12.1586L11.9348 12.8203L14.8073 13.5382C16.6854 14.0051 18.0028 15.6915 18 17.6253C18 17.8322 17.8321 18 17.625 18H0.375017C0.167912 18 5.72205e-06 17.8322 5.72205e-06 17.6253C-0.00305367 15.6913 1.31439 14.0044 3.19278 13.5375Z" fill="#C10016" />
                                    </svg>
                                </div>
                                <div className={`${styles.gender} ${!gender ? styles.activeGender : ""}`}
                                    onClick={() => {
                                        if (gender) setGender(false)
                                        setSelectedCategory({})

                                    }}
                                >
                                    <svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M18.9892 17.5343L18.5142 15.7343C18.2888 14.861 17.6055 14.1588 16.7052 13.875L13.2218 12.7755C12.3724 12.4403 11.9837 11.1442 11.8997 10.6522C12.547 10.1423 12.9635 9.41685 13.0635 8.62499C13.0492 8.48974 13.0829 8.35383 13.1593 8.23873C13.2827 8.20944 13.3837 8.1257 13.4308 8.01373C13.6587 7.49088 13.8018 6.93837 13.8551 6.37499C13.8553 6.34437 13.8513 6.31389 13.8433 6.28425C13.7866 6.06533 13.6507 5.87215 13.4593 5.73824V3.74998C13.4593 2.54173 13.0698 2.04599 12.6597 1.75873C12.5814 1.17675 11.9235 0 9.50103 0C7.35177 0.0819844 5.62922 1.71387 5.54268 3.75001V5.73827C5.35127 5.87218 5.21542 6.06537 5.15871 6.28429C5.1507 6.31392 5.14673 6.34444 5.14684 6.37502C5.20013 6.93868 5.34318 7.49145 5.57118 8.01453C5.60547 8.12053 5.69539 8.20206 5.80868 8.2298C5.85303 8.25078 5.93616 8.35956 5.93616 8.62506C6.03676 9.41917 6.45565 10.1463 7.10625 10.6561C7.02313 11.1473 6.63678 12.4426 5.8111 12.7696L2.29688 13.875C1.39723 14.1588 0.71442 14.8603 0.488721 15.7328L0.0137209 17.5328C-0.0400506 17.7336 0.0881252 17.9376 0.30002 17.9885C0.331674 17.9962 0.364219 18 0.396875 18.0001H18.6052C18.8238 18 19.001 17.8321 19.001 17.625C19.0009 17.5943 18.997 17.5639 18.9892 17.5343Z" fill="#939393" />
                                    </svg>

                                </div>

                            </div>
                            <div className={styles.categories}>
                                {
                                    categories.map((el) =>
                                        <div
                                            onClick={() => setSelectedCategory(el)}
                                            className={`${styles.category} ${selectedCategory.categoryId === el.categoryId ? styles.activeCategory : ""}`} key={el.categoryId}>
                                            <img className={styles.categoryImg} src={el.src} alt="#" />
                                            {el.category}
                                        </ div>)
                                }
                            </div>

                        </div>

                    </div>
                    {selectedCategory.categoryId && <div className={styles.subCategoriesBox}>
                        <div className={styles.subCategories} ref={buttonsGroupBox}>
                            <p className={styles.subCat}
                                ref={!currentSubCategory ? subCategoriesRef : null}
                                onClick={(e) => {
                                    setCurrentSubCategory(null)
                                    e.target.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
                                }} >
                                {selectedCategory && selectedCategory.category}
                            </p>
                            {
                                selectedCategory.subCategories && selectedCategory.subCategories.map((el, ind) => (
                                    <p key={ind} className={styles.subCat}
                                        onClick={(e) => {
                                            setCurrentSubCategory(el)
                                            e.target.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
                                        }}
                                        ref={currentSubCategory === el ? subCategoriesRef : null}
                                    >{el}</p>))
                            }
                        </div>
                        <div className={styles.scrollBar} ref={scrollBoxRef}>
                            <div className={styles.scrollThumb} ref={scrollTumbRef}  >
                            </div>
                        </div>
                    </div>}

                    <div className={styles.imgBox}>
                        <div className={styles.imgGroup}>
                            <label htmlFor='addImg' className={styles.img}>
                                <input type="file" value={""} id='addImg' onChange={(e) => {
                                    if (e.target.files[0]) {
                                        setImgs(() => {
                                            return { ...imgs, "0": URL.createObjectURL(e.target.files[0]) }
                                        })
                                    }

                                }} />
                                {
                                    imgs["0"] ? <img src={imgs["0"]} alt="#" /> :
                                        <svg width="174" height="114" viewBox="0 0 174 114" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <rect width="174" height="114" rx="5" fill="#D3D3D3" />
                                            <path d="M94.5625 27H79.4375C77.542 27 76 28.6586 76 30.6975V43.6387C76 45.6775 77.542 47.3361 79.4375 47.3361H87.6016C87.9294 47.3361 88.2286 47.1356 88.3732 46.8189C88.5175 46.5024 88.4819 46.1249 88.2812 45.8461L86.0334 42.7213L92.2635 34.1974L96.2812 39.353V40.9118C96.2812 41.4223 96.666 41.8361 97.1406 41.8361C97.6153 41.8361 98 41.4223 98 40.9118V30.6975C98 28.6586 96.458 27 94.5625 27V27ZM92.9008 32.1373C92.7345 31.9239 92.4879 31.802 92.2288 31.8069C91.9698 31.8112 91.7266 31.9409 91.5666 32.1599L84.9487 41.2138L82.6952 38.0814C82.5324 37.855 82.2815 37.7227 82.0156 37.7227C82.0153 37.7227 82.0148 37.7227 82.0145 37.7227C81.7481 37.7231 81.4968 37.8563 81.3345 38.0834L79.4432 40.728C79.1538 41.1327 79.2242 41.713 79.6003 42.0243C79.9766 42.3357 80.5161 42.2599 80.8055 41.8553L82.0176 40.1604L85.8499 45.4874H79.4375C78.4898 45.4874 77.7188 44.658 77.7188 43.6387V30.6975C77.7188 29.6781 78.4898 28.8487 79.4375 28.8487H94.5625C95.5102 28.8487 96.2812 29.6781 96.2812 30.6975V36.4752L92.9008 32.1373ZM82.0156 30.3277C80.594 30.3277 79.4375 31.5717 79.4375 33.1008C79.4375 34.63 80.594 35.874 82.0156 35.874C83.4373 35.874 84.5938 34.63 84.5938 33.1008C84.5938 31.5717 83.4373 30.3277 82.0156 30.3277ZM82.0156 34.0252C81.5418 34.0252 81.1562 33.6105 81.1562 33.1008C81.1562 32.5912 81.5418 32.1765 82.0156 32.1765C82.4895 32.1765 82.875 32.5912 82.875 33.1008C82.875 33.6105 82.4895 34.0252 82.0156 34.0252ZM98 44.6092C98 45.1198 97.6153 45.5336 97.1406 45.5336H94.7773V48.0756C94.7773 48.5862 94.3926 49 93.918 49C93.4433 49 93.0586 48.5862 93.0586 48.0756V45.5336H90.6953C90.2206 45.5336 89.8359 45.1198 89.8359 44.6092C89.8359 44.0987 90.2206 43.6849 90.6953 43.6849H93.0586V41.1429C93.0586 40.6323 93.4433 40.2185 93.918 40.2185C94.3926 40.2185 94.7773 40.6323 94.7773 41.1429V43.6849H97.1406C97.6153 43.6849 98 44.0987 98 44.6092Z" fill="white" />
                                            <path d="M56.4113 62.89C57.3773 62.526 57.9653 61.756 57.9653 60.748C57.9653 59.04 56.2153 58.046 54.1713 58.046C53.1073 58.046 51.9733 58.312 50.9513 58.886L51.3993 60.034C52.2673 59.502 53.2473 59.25 54.1293 59.25C55.4733 59.25 56.5513 59.852 56.5513 60.916C56.5513 61.826 55.8093 62.372 54.5633 62.372H52.4773V63.506H54.6613C56.1033 63.506 56.9573 64.038 56.9573 65.046C56.9573 66.25 55.6833 66.908 54.1853 66.908C53.1493 66.908 52.0153 66.586 51.1333 65.9L50.6433 66.936C51.7353 67.748 53.0933 68.112 54.3533 68.112C56.4813 68.112 58.3713 67.062 58.3713 65.256C58.3713 64.094 57.6293 63.226 56.4113 62.89ZM63.1257 60.51C61.9357 60.51 60.8297 60.846 60.0597 61.462L60.6197 62.47C61.1937 61.98 62.0897 61.672 62.9717 61.672C64.3017 61.672 64.9597 62.33 64.9597 63.464V63.73H62.8317C60.6197 63.73 59.8497 64.71 59.8497 65.9C59.8497 67.188 60.9137 68.084 62.5937 68.084C63.7557 68.084 64.5817 67.692 65.0297 67.02V68H66.3037V63.52C66.3037 61.49 65.1557 60.51 63.1257 60.51ZM62.8177 67.048C61.7957 67.048 61.1797 66.586 61.1797 65.844C61.1797 65.214 61.5577 64.696 62.8877 64.696H64.9597V65.732C64.6237 66.586 63.8257 67.048 62.8177 67.048ZM74.1839 60.58H68.7239V68H70.0679V61.756H74.1839V60.58ZM79.4938 60.51C78.4018 60.51 77.4498 60.93 76.8478 61.756V60.58H75.5598V70.716H76.9038V66.88C77.5198 67.678 78.4438 68.084 79.4938 68.084C81.6638 68.084 83.2458 66.572 83.2458 64.29C83.2458 62.022 81.6638 60.51 79.4938 60.51ZM79.3818 66.908C77.9678 66.908 76.8898 65.872 76.8898 64.29C76.8898 62.722 77.9678 61.686 79.3818 61.686C80.8098 61.686 81.8878 62.722 81.8878 64.29C81.8878 65.872 80.8098 66.908 79.3818 66.908ZM90.2994 60.58L87.7374 66.516L85.1474 60.58H83.7474L87.0234 67.986L86.7854 68.504C86.4214 69.358 86.0154 69.652 85.3714 69.652C84.8674 69.652 84.4054 69.456 84.0414 69.106L83.4674 70.114C83.9294 70.562 84.6574 70.8 85.3714 70.8C86.5054 70.8 87.3594 70.31 88.0174 68.742L91.6154 60.58H90.2994ZM96.8317 64.136C97.6437 63.842 98.1757 63.24 98.1757 62.498C98.1757 61.294 96.8457 60.482 95.0397 60.482C94.0877 60.482 93.1637 60.678 92.1977 61.168L92.5617 62.204C93.3737 61.826 94.1437 61.63 94.8997 61.63C96.0337 61.63 96.7897 62.022 96.7897 62.694C96.7897 63.324 96.1597 63.688 95.1657 63.688H93.9057V64.654H95.2637C96.3557 64.654 96.9997 65.046 96.9997 65.732C96.9997 66.488 96.1737 66.95 94.9137 66.95C94.0037 66.95 93.0237 66.698 92.3097 66.236L91.9037 67.258C92.7297 67.79 93.8217 68.098 94.9277 68.098C96.9017 68.098 98.3857 67.188 98.3857 65.844C98.3857 64.99 97.8257 64.388 96.8317 64.136ZM100.429 68H101.661L106.197 62.596V68H107.541V60.58H106.323L101.773 65.984V60.58H100.429V68ZM115.68 60.58H108.904V61.756H111.62V68H112.964V61.756H115.68V60.58ZM120.484 63.1L118.398 63.086V60.58H117.054V68L120.274 68.014C122.262 68.028 123.382 67.132 123.382 65.522C123.382 63.996 122.374 63.114 120.484 63.1ZM120.162 66.992L118.398 66.978V64.066L120.162 64.094C121.394 64.108 122.01 64.528 122.01 65.508C122.01 66.502 121.38 67.006 120.162 66.992ZM80.7334 80.086C80.7334 77.51 78.8294 75.956 75.5394 75.83V74.836H74.2374V75.83C70.9334 75.956 69.0294 77.496 69.0294 80.086C69.0294 82.662 70.9334 84.202 74.2374 84.328V85.364H75.5394V84.328C78.8434 84.216 80.7334 82.676 80.7334 80.086ZM75.5394 83.236V76.936C77.9894 77.076 79.3894 78.168 79.3894 80.072C79.3894 82.004 78.0314 83.082 75.5394 83.236ZM70.3874 80.086C70.3874 78.154 71.7454 77.09 74.2374 76.936V83.236C71.8014 83.082 70.3874 82.018 70.3874 80.086ZM85.8404 85.084C88.0664 85.084 89.6904 83.502 89.6904 81.29C89.6904 79.078 88.0664 77.51 85.8404 77.51C83.6144 77.51 81.9764 79.078 81.9764 81.29C81.9764 83.502 83.6144 85.084 85.8404 85.084ZM85.8404 83.908C84.4124 83.908 83.3344 82.872 83.3344 81.29C83.3344 79.708 84.4124 78.686 85.8404 78.686C87.2684 78.686 88.3324 79.708 88.3324 81.29C88.3324 82.872 87.2684 83.908 85.8404 83.908ZM96.8877 77.58H90.1117V78.756H92.8277V85H94.1717V78.756H96.8877V77.58ZM101.112 85.084C103.338 85.084 104.962 83.502 104.962 81.29C104.962 79.078 103.338 77.51 101.112 77.51C98.8858 77.51 97.2478 79.078 97.2478 81.29C97.2478 83.502 98.8858 85.084 101.112 85.084ZM101.112 83.908C99.6838 83.908 98.6058 82.872 98.6058 81.29C98.6058 79.708 99.6838 78.686 101.112 78.686C102.54 78.686 103.604 79.708 103.604 81.29C103.604 82.872 102.54 83.908 101.112 83.908Z" fill="white" />
                                        </svg>


                                }
                            </label>
                            <div className={styles.imgs}>
                                <label htmlFor='firstItem' className={styles.imgsItem}>
                                    <input type="file" value={""} id='firstItem' onChange={(e) => {
                                        if (e.target.files[0]) {
                                            setImgs(() => {
                                                return {
                                                    ...imgs, "1": URL.createObjectURL(e.target.files[0])
                                                }
                                            })
                                        }
                                    }} />
                                    {
                                        imgs["1"] ? <img src={imgs["1"]} alt="#" />
                                            : <svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="34" height="34" rx="5" fill="#EBEBEB" />
                                                <path d="M22.5 9H11.5C10.1215 9 9 10.2063 9 11.6891V21.1008C9 22.5836 10.1215 23.7899 11.5 23.7899H17.4375C17.6759 23.7899 17.8936 23.644 17.9987 23.4137C18.1036 23.1836 18.0778 22.909 17.9318 22.7063L16.297 20.4337L20.828 14.2345L23.75 17.984V19.1176C23.75 19.489 24.0298 19.7899 24.375 19.7899C24.7202 19.7899 25 19.489 25 19.1176V11.6891C25 10.2063 23.8785 9 22.5 9V9ZM21.2915 12.7362C21.1705 12.581 20.9912 12.4924 20.8027 12.4959C20.6144 12.4991 20.4375 12.5934 20.3212 12.7526L15.5082 19.3373L13.8693 17.0592C13.7509 16.8946 13.5684 16.7983 13.375 16.7983C13.3748 16.7983 13.3744 16.7983 13.3741 16.7983C13.1804 16.7986 12.9977 16.8955 12.8796 17.0607L11.5042 18.984C11.2937 19.2784 11.3448 19.7004 11.6184 19.9267C11.8921 20.1532 12.2844 20.0981 12.4949 19.8038L13.3765 18.5712L16.1636 22.4454H11.5C10.8108 22.4454 10.25 21.8422 10.25 21.1008V11.6891C10.25 10.9477 10.8108 10.3445 11.5 10.3445H22.5C23.1892 10.3445 23.75 10.9477 23.75 11.6891V15.891L21.2915 12.7362ZM13.375 11.4202C12.3411 11.4202 11.5 12.3248 11.5 13.437C11.5 14.5491 12.3411 15.4538 13.375 15.4538C14.4089 15.4538 15.25 14.5491 15.25 13.437C15.25 12.3248 14.4089 11.4202 13.375 11.4202ZM13.375 14.1092C13.0304 14.1092 12.75 13.8076 12.75 13.437C12.75 13.0663 13.0304 12.7647 13.375 12.7647C13.7196 12.7647 14 13.0663 14 13.437C14 13.8076 13.7196 14.1092 13.375 14.1092ZM25 21.8067C25 22.178 24.7202 22.479 24.375 22.479H22.6562V24.3277C22.6562 24.6991 22.3765 25 22.0312 25C21.686 25 21.4062 24.6991 21.4062 24.3277V22.479H19.6875C19.3423 22.479 19.0625 22.178 19.0625 21.8067C19.0625 21.4354 19.3423 21.1345 19.6875 21.1345H21.4062V19.2857C21.4062 18.9144 21.686 18.6134 22.0312 18.6134C22.3765 18.6134 22.6562 18.9144 22.6562 19.2857V21.1345H24.375C24.7202 21.1345 25 21.4354 25 21.8067Z" fill="white" />
                                            </svg>

                                    }
                                </label>
                                <label htmlFor='secondItem' className={styles.imgsItem}>
                                    <input type="file" value={""} id='secondItem' onChange={(ev) => {
                                        if (ev.target.files[0]) {
                                            setImgs((prev) => {
                                                return { ...imgs, "2": URL.createObjectURL(ev.target.files[0]) }
                                            })
                                        }
                                    }} />
                                    {
                                        imgs["2"] ? <img src={imgs["2"]} alt="#" />
                                            : <svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="34" height="34" rx="5" fill="#EBEBEB" />
                                                <path d="M22.5 9H11.5C10.1215 9 9 10.2063 9 11.6891V21.1008C9 22.5836 10.1215 23.7899 11.5 23.7899H17.4375C17.6759 23.7899 17.8936 23.644 17.9987 23.4137C18.1036 23.1836 18.0778 22.909 17.9318 22.7063L16.297 20.4337L20.828 14.2345L23.75 17.984V19.1176C23.75 19.489 24.0298 19.7899 24.375 19.7899C24.7202 19.7899 25 19.489 25 19.1176V11.6891C25 10.2063 23.8785 9 22.5 9V9ZM21.2915 12.7362C21.1705 12.581 20.9912 12.4924 20.8027 12.4959C20.6144 12.4991 20.4375 12.5934 20.3212 12.7526L15.5082 19.3373L13.8693 17.0592C13.7509 16.8946 13.5684 16.7983 13.375 16.7983C13.3748 16.7983 13.3744 16.7983 13.3741 16.7983C13.1804 16.7986 12.9977 16.8955 12.8796 17.0607L11.5042 18.984C11.2937 19.2784 11.3448 19.7004 11.6184 19.9267C11.8921 20.1532 12.2844 20.0981 12.4949 19.8038L13.3765 18.5712L16.1636 22.4454H11.5C10.8108 22.4454 10.25 21.8422 10.25 21.1008V11.6891C10.25 10.9477 10.8108 10.3445 11.5 10.3445H22.5C23.1892 10.3445 23.75 10.9477 23.75 11.6891V15.891L21.2915 12.7362ZM13.375 11.4202C12.3411 11.4202 11.5 12.3248 11.5 13.437C11.5 14.5491 12.3411 15.4538 13.375 15.4538C14.4089 15.4538 15.25 14.5491 15.25 13.437C15.25 12.3248 14.4089 11.4202 13.375 11.4202ZM13.375 14.1092C13.0304 14.1092 12.75 13.8076 12.75 13.437C12.75 13.0663 13.0304 12.7647 13.375 12.7647C13.7196 12.7647 14 13.0663 14 13.437C14 13.8076 13.7196 14.1092 13.375 14.1092ZM25 21.8067C25 22.178 24.7202 22.479 24.375 22.479H22.6562V24.3277C22.6562 24.6991 22.3765 25 22.0312 25C21.686 25 21.4062 24.6991 21.4062 24.3277V22.479H19.6875C19.3423 22.479 19.0625 22.178 19.0625 21.8067C19.0625 21.4354 19.3423 21.1345 19.6875 21.1345H21.4062V19.2857C21.4062 18.9144 21.686 18.6134 22.0312 18.6134C22.3765 18.6134 22.6562 18.9144 22.6562 19.2857V21.1345H24.375C24.7202 21.1345 25 21.4354 25 21.8067Z" fill="white" />
                                            </svg>

                                    }
                                </label>
                                <label htmlFor='thirdItem' className={styles.imgsItem}>
                                    <input type="file" id='thirdItem' value={""} onChange={(eve) => {
                                        if (eve.target.files[0]) {
                                            setImgs(() => {
                                                return {
                                                    ...imgs, "3": URL.createObjectURL(eve.target.files[0])
                                                }
                                            })
                                        }
                                    }} />
                                    {
                                        imgs["3"] ? <img src={imgs["3"]} alt="#" />
                                            : <svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="34" height="34" rx="5" fill="#EBEBEB" />
                                                <path d="M22.5 9H11.5C10.1215 9 9 10.2063 9 11.6891V21.1008C9 22.5836 10.1215 23.7899 11.5 23.7899H17.4375C17.6759 23.7899 17.8936 23.644 17.9987 23.4137C18.1036 23.1836 18.0778 22.909 17.9318 22.7063L16.297 20.4337L20.828 14.2345L23.75 17.984V19.1176C23.75 19.489 24.0298 19.7899 24.375 19.7899C24.7202 19.7899 25 19.489 25 19.1176V11.6891C25 10.2063 23.8785 9 22.5 9V9ZM21.2915 12.7362C21.1705 12.581 20.9912 12.4924 20.8027 12.4959C20.6144 12.4991 20.4375 12.5934 20.3212 12.7526L15.5082 19.3373L13.8693 17.0592C13.7509 16.8946 13.5684 16.7983 13.375 16.7983C13.3748 16.7983 13.3744 16.7983 13.3741 16.7983C13.1804 16.7986 12.9977 16.8955 12.8796 17.0607L11.5042 18.984C11.2937 19.2784 11.3448 19.7004 11.6184 19.9267C11.8921 20.1532 12.2844 20.0981 12.4949 19.8038L13.3765 18.5712L16.1636 22.4454H11.5C10.8108 22.4454 10.25 21.8422 10.25 21.1008V11.6891C10.25 10.9477 10.8108 10.3445 11.5 10.3445H22.5C23.1892 10.3445 23.75 10.9477 23.75 11.6891V15.891L21.2915 12.7362ZM13.375 11.4202C12.3411 11.4202 11.5 12.3248 11.5 13.437C11.5 14.5491 12.3411 15.4538 13.375 15.4538C14.4089 15.4538 15.25 14.5491 15.25 13.437C15.25 12.3248 14.4089 11.4202 13.375 11.4202ZM13.375 14.1092C13.0304 14.1092 12.75 13.8076 12.75 13.437C12.75 13.0663 13.0304 12.7647 13.375 12.7647C13.7196 12.7647 14 13.0663 14 13.437C14 13.8076 13.7196 14.1092 13.375 14.1092ZM25 21.8067C25 22.178 24.7202 22.479 24.375 22.479H22.6562V24.3277C22.6562 24.6991 22.3765 25 22.0312 25C21.686 25 21.4062 24.6991 21.4062 24.3277V22.479H19.6875C19.3423 22.479 19.0625 22.178 19.0625 21.8067C19.0625 21.4354 19.3423 21.1345 19.6875 21.1345H21.4062V19.2857C21.4062 18.9144 21.686 18.6134 22.0312 18.6134C22.3765 18.6134 22.6562 18.9144 22.6562 19.2857V21.1345H24.375C24.7202 21.1345 25 21.4354 25 21.8067Z" fill="white" />
                                            </svg>

                                    }
                                </label>
                                <label htmlFor='fourItem' className={styles.imgsItem}>
                                    <input type="file" value={""} id='fourItem' onChange={(even) => {
                                        if (even.target.files[0]) {
                                            setImgs(() => {
                                                return { ...imgs, "4": URL.createObjectURL(even.target.files[0]) }
                                            })
                                        }
                                    }} />
                                    {
                                        imgs["4"] ? <img src={imgs["4"]} alt="#" />
                                            : <svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="34" height="34" rx="5" fill="#EBEBEB" />
                                                <path d="M22.5 9H11.5C10.1215 9 9 10.2063 9 11.6891V21.1008C9 22.5836 10.1215 23.7899 11.5 23.7899H17.4375C17.6759 23.7899 17.8936 23.644 17.9987 23.4137C18.1036 23.1836 18.0778 22.909 17.9318 22.7063L16.297 20.4337L20.828 14.2345L23.75 17.984V19.1176C23.75 19.489 24.0298 19.7899 24.375 19.7899C24.7202 19.7899 25 19.489 25 19.1176V11.6891C25 10.2063 23.8785 9 22.5 9V9ZM21.2915 12.7362C21.1705 12.581 20.9912 12.4924 20.8027 12.4959C20.6144 12.4991 20.4375 12.5934 20.3212 12.7526L15.5082 19.3373L13.8693 17.0592C13.7509 16.8946 13.5684 16.7983 13.375 16.7983C13.3748 16.7983 13.3744 16.7983 13.3741 16.7983C13.1804 16.7986 12.9977 16.8955 12.8796 17.0607L11.5042 18.984C11.2937 19.2784 11.3448 19.7004 11.6184 19.9267C11.8921 20.1532 12.2844 20.0981 12.4949 19.8038L13.3765 18.5712L16.1636 22.4454H11.5C10.8108 22.4454 10.25 21.8422 10.25 21.1008V11.6891C10.25 10.9477 10.8108 10.3445 11.5 10.3445H22.5C23.1892 10.3445 23.75 10.9477 23.75 11.6891V15.891L21.2915 12.7362ZM13.375 11.4202C12.3411 11.4202 11.5 12.3248 11.5 13.437C11.5 14.5491 12.3411 15.4538 13.375 15.4538C14.4089 15.4538 15.25 14.5491 15.25 13.437C15.25 12.3248 14.4089 11.4202 13.375 11.4202ZM13.375 14.1092C13.0304 14.1092 12.75 13.8076 12.75 13.437C12.75 13.0663 13.0304 12.7647 13.375 12.7647C13.7196 12.7647 14 13.0663 14 13.437C14 13.8076 13.7196 14.1092 13.375 14.1092ZM25 21.8067C25 22.178 24.7202 22.479 24.375 22.479H22.6562V24.3277C22.6562 24.6991 22.3765 25 22.0312 25C21.686 25 21.4062 24.6991 21.4062 24.3277V22.479H19.6875C19.3423 22.479 19.0625 22.178 19.0625 21.8067C19.0625 21.4354 19.3423 21.1345 19.6875 21.1345H21.4062V19.2857C21.4062 18.9144 21.686 18.6134 22.0312 18.6134C22.3765 18.6134 22.6562 18.9144 22.6562 19.2857V21.1345H24.375C24.7202 21.1345 25 21.4354 25 21.8067Z" fill="white" />
                                            </svg>

                                    }
                                </label>
                            </div>
                        </div>
                        <div className={styles.tags}>
                            <label htmlFor="tags" className={styles.inputBox} >
                                <span className={`${tagsinputChange ? styles.activeInp : ""}`} >теги</span>
                                <input id="tags" type="text" value={tags}
                                    onChange={(e) => {
                                        setTags(e.target.value)
                                    }}
                                    onFocus={() => {
                                        setTagsInputChange(true);
                                    }}
                                    onBlur={(e) => {
                                        if (!e.target.value)
                                            setTagsInputChange(false);
                                    }} />
                            </label>
                            <label htmlFor="article" className={styles.inputBox}>
                                <span className={`${articleinputChange ? styles.activeInp : ""}`}>артикул</span>
                                <input type="text" value={article} id="article" onFocus={() => {
                                    setArticleInputChange(true)
                                }}
                                    onBlur={(e) => {
                                        if (!e.target.value) setArticleInputChange(false)
                                    }}
                                    onChange={(e) => {
                                        setArticle(e.target.value)
                                    }}
                                />
                            </label>
                        </div>
                    </div>

                    <div className={styles.changeGold}>
                        <div className={styles.changeGoldHead}>
                            <div className={styles.iconBox}>
                                <svg width="24" height="18" viewBox="0 0 24 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M23.9823 17.353L22.3823 10.853C22.3571 10.7508 22.3064 10.6613 22.2376 10.5978C22.1688 10.5343 22.0855 10.5 22 10.5H14.3628L18.4872 5.16022C18.6918 5.56028 18.8003 6.02522 18.8 6.5C18.8 6.63261 18.8421 6.75979 18.9171 6.85355C18.9922 6.94732 19.0939 7 19.2 7C19.3061 7 19.4078 6.94732 19.4828 6.85355C19.5578 6.75979 19.6 6.63261 19.6 6.5C19.6006 5.83719 19.8115 5.20175 20.1864 4.73307C20.5614 4.26439 21.0697 4.00076 21.6 4C21.7061 4 21.8078 3.94732 21.8828 3.85355C21.9578 3.75979 22 3.63261 22 3.5C22 3.36739 21.9578 3.24021 21.8828 3.14645C21.8078 3.05268 21.7061 3 21.6 3C21.0697 2.99924 20.5614 2.73561 20.1864 2.26693C19.8115 1.79825 19.6006 1.16281 19.6 0.5C19.6 0.367392 19.5578 0.240215 19.4828 0.146447C19.4078 0.0526785 19.3061 0 19.2 0C19.0939 0 18.9922 0.0526785 18.9171 0.146447C18.8421 0.240215 18.8 0.367392 18.8 0.5C18.8003 0.968039 18.6949 1.42667 18.4958 1.82307L15.3655 0.0447998C15.3135 0.0155298 15.257 0.000564302 15.2 0.000915527V0H10.4C10.2939 3.67393e-06 10.1922 0.0526717 10.1171 0.146423L6.3322 4.87761C6.11521 4.4694 5.99964 3.9901 6.00001 3.5C6.00001 3.36739 5.95787 3.24021 5.88285 3.14645C5.80784 3.05268 5.7061 3 5.60001 3C5.49392 3 5.39218 3.05268 5.31717 3.14645C5.24215 3.24021 5.20001 3.36739 5.20001 3.5C5.1994 4.16281 4.98849 4.79825 4.61355 5.26693C4.23861 5.73561 3.73026 5.99924 3.20001 6C3.09393 6 2.99218 6.05268 2.91717 6.14645C2.84216 6.24021 2.80001 6.36739 2.80001 6.5C2.80001 6.63261 2.84216 6.75979 2.91717 6.85355C2.99218 6.94732 3.09393 7 3.20001 7C3.59209 6.99954 3.97553 7.14401 4.3021 7.41524L1.71715 10.6464L1.71732 10.6466C1.67112 10.7042 1.63691 10.775 1.61769 10.853L0.0176923 17.353C-0.00071877 17.4278 -0.00483113 17.5069 0.0056861 17.584C0.0162033 17.6612 0.0410565 17.7341 0.0782463 17.7971C0.115436 17.86 0.163924 17.9112 0.21981 17.9464C0.275697 17.9816 0.33742 18 0.400017 18H23.6C23.6626 18 23.7243 17.9816 23.7802 17.9464C23.8361 17.9112 23.8846 17.86 23.9218 17.7971C23.9589 17.7341 23.9838 17.6612 23.9943 17.584C24.0048 17.5069 24.0007 17.4278 23.9823 17.353ZM16.6584 11.5L15.3046 17H9.34219L13.5904 11.5H16.6584ZM19.2 2.30127C19.437 2.79232 19.7661 3.20377 20.159 3.5C19.7661 3.79623 19.437 4.20768 19.2 4.69873C18.963 4.20768 18.6338 3.79623 18.241 3.5C18.6338 3.20377 18.963 2.79232 19.2 2.30127ZM17.9025 2.58444C17.5758 2.85588 17.1922 3.00047 16.8 3C16.6939 3 16.5922 3.05268 16.5171 3.14645C16.4421 3.24021 16.4 3.36739 16.4 3.5C16.4 3.63261 16.4421 3.75979 16.5171 3.85355C16.5922 3.94732 16.6939 4 16.8 4C17.2042 3.99952 17.5989 4.15303 17.9315 4.44006L8.58301 16.5432L7.25316 11.1407L15.2869 1.09857L17.9025 2.58444ZM10.5657 1H14.2343L6.63428 10.5H2.96574L4.86782 8.12239C5.0848 8.5306 5.20038 9.0099 5.20001 9.5C5.20001 9.63261 5.24215 9.75979 5.31717 9.85355C5.39218 9.94732 5.49392 10 5.60001 10C5.7061 10 5.80784 9.94732 5.88285 9.85355C5.95787 9.75979 6.00001 9.63261 6.00001 9.5C6.00062 8.83719 6.21152 8.20175 6.58646 7.73307C6.9614 7.26439 7.46976 7.00076 8.00001 7C8.10609 7 8.20783 6.94732 8.28285 6.85355C8.35786 6.75979 8.40001 6.63261 8.40001 6.5C8.40001 6.36739 8.35786 6.24021 8.28285 6.14645C8.20783 6.05268 8.10609 6 8.00001 6C7.60792 6.00047 7.22448 5.856 6.89792 5.58476L10.5657 1ZM5.60001 5.30127C5.83699 5.79232 6.16615 6.20377 6.55899 6.5C6.16615 6.79623 5.83699 7.20768 5.60001 7.69873C5.36303 7.20768 5.03387 6.79623 4.64103 6.5C5.03387 6.20377 5.36303 5.79232 5.60001 5.30127ZM0.941616 17L2.29542 11.5H6.5046L7.85841 17H0.941616ZM16.1416 17L17.4954 11.5H21.7046L23.0584 17H16.1416Z" fill="#2E2E2E" />
                                </svg>
                                золото

                            </div>
                            <div className={styles.openAndCloseHiddenBox}>
                                <span>
                                    курс
                                </span>
                                <svg
                                    onClick={() => {
                                        setShowGold(!showGold)
                                    }}
                                    className={`${!showGold ? styles.transform : ""}`} width="18" height="18" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path opacity="0.55" d="M1 7L7 1L13 7" stroke="#1F1617" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                                </svg>

                            </div>

                        </div>
                        <div className={`${showGold ? styles.hiddenBox : ""} ${styles.goldsBox} `}>

                            <div className={styles.golds}>
                                <div className={styles.goldsContainer}>
                                    <div className={styles.goldBox}>
                                        {
                                            goldsSelect.map((el, ind) => {
                                                if (ind < 3)
                                                    return (
                                                        <span key={ind}
                                                            onClick={() => {
                                                                setCurrentGoldProb(el)
                                                            }}
                                                            style={{ background: `${el.color}`, opacity: currentGoldProb.prob === el.prob && currentGoldProb.color === el.color ? "1" : "" }} className={styles.probs}>
                                                            {el.prob}
                                                        </span>
                                                    )
                                            })
                                        }
                                    </div>
                                    <div className={styles.goldBox}>
                                        {
                                            goldsSelect.map((el, ind) => {
                                                if (ind > 2)
                                                    return (
                                                        <span key={ind}
                                                            onClick={() => {
                                                                setCurrentGoldProb(el)
                                                            }}
                                                            style={{ background: `${el.color}`, opacity: currentGoldProb.prob === el.prob && currentGoldProb.color === el.color ? "1" : "" }} className={styles.probs}>
                                                            {el.prob}
                                                        </span>
                                                    )
                                            })
                                        }
                                    </div>
                                </div>
                            </div>
                            <div className={styles.weights}>
                                <div className={styles.setWeight} >
                                    <div className={styles.weightInp}>

                                        <span>
                                            нач. вес
                                        </span>
                                        <input type="text" value={startWeight} onChange={(e) => {
                                            if (+e.target.value || e.target.value === "") setStartWeight(e.target.value)
                                        }} />
                                        гр
                                    </div>
                                </div>
                                <div className={styles.setWeight} >
                                    <div className={styles.weightInp}>

                                        <span>
                                            вес
                                        </span>
                                        <input type="text" value={endWeight} onChange={(e) => {
                                            if (+e.target.value || e.target.value === "") setEndWeight(e.target.value)
                                        }} />
                                        гр
                                    </div>
                                </div>
                                <div className={styles.setWeight} >
                                    <div className={styles.weightInp}>

                                        <input type="text" value={price} placeholder='цена ' onChange={(e) => {
                                            if (+e.target.value || e.target.value === "") setPrice(e.target.value)
                                        }} />
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>

                </div>
                <div className={styles.acceptProductBtnBox}>

                    <button className={styles.acceptProductBtn} onClick={() => {
                        if (selectedCategory && currentSubCategory && currentGoldProb && startWeight && endWeight && price && [...Object.entries(imgs)].length > 0) {
                            const newProduct = {
                                img: [...Object.values(imgs)],
                                article: article ? article : Math.round(Date.now() / 1000 + (Math.random() * 255)),
                                tags: tags,
                                prob: currentGoldProb.prob,
                                work: startWeight - endWeight,
                                gold: currentGoldProb.color === "c0c0c0" ? "silver" : currentGoldProb.color === "#E9D07A" ? "gold" : "red gold",
                                carat: endWeight / 0.2,
                                category: selectedCategory.category,
                                subCategory: currentSubCategory,
                                count: 1,
                                data: new Date().toLocaleDateString(),
                                gender: gender ? "womens" : 'mens',
                                price: price,
                                categoryId: selectedCategory.categoryId,
                                id: products[products.length - 1].id + 1
                            }
                            setProducts([...products, newProduct])
                            dispath(addProduct(newProduct))
                            setAddPopUp(false);
                            setAddedImg("");
                            setArticle("");
                            setTags("");
                            setStartWeight("");
                            setEndWeight("");
                            setCurrentGoldProb({});
                            setCurrentSubCategory("");
                            setSelectedCategory("");
                            setPrice("");
                            setTagsInputChange(false);
                            setArticleInputChange(false);
                            setAddPopUp(false);
                            setImgs({});
                        }
                    }} >добавить</button>
                </div>
            </div>
        </div>
    )
}

export default AddProductPopUp
